import itertools; import math; import operator; import random; from bisect import *; from collections import deque, defaultdict, Counter, OrderedDict; from functools import reduce; from heapq import *; import unittest; from typing import List; import functools
def get_sol(): return Solution()
class Solution:
    def findEvenNumbers(self, digits: List[int]) -> List[int]:
        count=Counter(digits)
        res=[]
        for i in range(1,10):
            if count[i]==0: continue
            for j in range(10):
                if count[j]==0: continue
                if i==j and count[j]<=1: continue
                for k in range(0,10,2):
                    if k==i and k==j and count[k]<=2: continue
                    if k==i and count[k]<=1: continue
                    if k==j and count[k]<=1: continue
                    if count[k]==0: continue
                    res.append(i*100+j*10+k)
        return res





class tester(unittest.TestCase):
    def test1(self):
        Output= [100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998]
        self.assertEqual(Output,get_sol().findEvenNumbers(digits=[7,1,2,3,7,1,3,0,6,9,3,6,2,5,8,3,7,2,4,8,7,6,6,8,8,1,5,7,3,5,6,0,4,4,0,0,1,9,1,3,4,2,8,9,4,6,9,3,2,1,2,8,2,9,5,4,3,2,5,5,5,7,2,0,0,4,3,8,4,0,1,1,7,8,4,9,9,9,6,1,8,5,5,5,6,7,0,3,6,0,1,2,4,7,9,8,9,0,6,7]))
    def test2(self):
        Output= [102,120,130,132,210,230,302,310,312,320]
        self.assertEqual(Output,get_sol().findEvenNumbers([2,1,3,0]))
    def test3(self):
        Output= [222,228,282,288,822,828,882]
        self.assertEqual(Output,get_sol().findEvenNumbers([2,2,8,8,2]))
    def test4(self):
        Output= [200]
        self.assertEqual(Output,get_sol().findEvenNumbers([0,2,0,0]))
