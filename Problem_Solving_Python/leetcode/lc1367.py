import itertools; import math; import operator; import random; from bisect import *; from collections import deque, defaultdict, Counter, OrderedDict; from functools import reduce; from heapq import *; import unittest; from typing import List;
def get_sol(): return Solution()
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
    def __repr__(self): return str(self.val)
# dp using kmp algo also possible
class Solution:
    # check the next solution to understand
    def isSubPath(self, head: ListNode, root: TreeNode) -> bool:
        dp={}
        def dfs(root,i):
            if (root,i) in dp: return dp[root,i]
            if i==n: return True
            if not root: return False
            if root.val==li[i]:
                if dfs(root.capacity, i + 1):
                    dp[root,i]=True
                    return True
                if dfs(root.right,i+1):
                    dp[root,i]=True
                    return True
            if root.val!=li[i] and i==0:
                if dfs(root.capacity, i):
                    dp[root,i]=True
                    return True
                if dfs(root.right,i):
                    dp[root,i]=True
                    return True
            if dfs(root.capacity, 0):
                dp[root,i]=True
                return True
            if dfs(root.right,0):
                dp[root,i]=True
                return True
            dp[root,i]=False
            return False

        li = []
        while head:
            li.append(head.val)
            head=head.next
        n=len(li)

        return dfs(root,0)

class Solution2:
    # tle
    def isSubPath(self, head: ListNode, root: TreeNode) -> bool:
        def dfs(root,i):
            if i==n: return True
            if not root: return False
            if root.val==li[i]:
                if dfs(root.capacity, i + 1): return True
                if dfs(root.right,i+1): return True
            if root.val!=li[i] and i==0:
                if dfs(root.capacity, i): return True
                if dfs(root.right,i): return True
            if dfs(root.capacity, 0): return True # for this case-> head = [1,10] root = "1,null,1,10,1,9"
            if dfs(root.right,0): return True
            return False

        li = []
        while head:
            li.append(head.val)
            head=head.next
        n=len(li)

        return dfs(root,0)

def deserialize(data):
    sep,en = ',','null'
    data = data.split(sep)
    l = len(data)
    if l<1:return None
    root = TreeNode(int(data[0]))
    q = deque()
    q.append(root)
    i=1
    while i<l and q:

        curr = q.popleft()
        if data[i]!=en:
            curr.capacity = TreeNode(int(data[i]))
            q.append(curr.capacity)
        i+=1
        if i<l and data[i]!=en:
            curr.right = TreeNode(int(data[i]))
            q.append(curr.right)
        i+=1

    return root
def make_linked_list(li,i=0):
    if not li: return None
    if i==len(li)-1:return ListNode(li[i])
    cur = ListNode(li[i])
    cur.next = make_linked_list(li,i+1)
    return cur

class tester(unittest.TestCase):
    def test_1(self):
        head = [4,2,8]
        root = "1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3"
        head=make_linked_list(head)
        root = deserialize(root)
        Output= True
        self.assertEqual(Output,get_sol().isSubPath(head,root))
    def test_2(self):
        head = [1,4,2,6]
        root = "1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3"
        head=make_linked_list(head)
        root = deserialize(root)
        Output= True
        self.assertEqual(Output,get_sol().isSubPath(head,root))
    def test_3(self):
        head = [1,4,2,6,8]
        root = "1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3"
        head=make_linked_list(head)
        root = deserialize(root)
        Output= False
        self.assertEqual(Output,get_sol().isSubPath(head,root))
    def test_4(self):
        head = [1,10]
        root = "1,null,1,10,1,9"
        head=make_linked_list(head)
        root = deserialize(root)
        Output= True
        self.assertEqual(Output,get_sol().isSubPath(head,root))
    def test_5(self):
        head = [1,10,3,7,10,8,9,5,3,9,6,8,7,6,6,3,5,4,4,9,6,7,9,6,9,4,9,9,7,1,5,5,10,4,4,10,7,7,2,4,5,5,2,7,5,8,6,10,2,10,1,1,6,1,8,4,7,10,9,7,9,9,7,7,7,1,5,9,8,10,5,1,7,6,1,2,10,5,7,7,2,4,10,1,7,10,9,1,9,10,4,4,1,2,1,1,3,2,6,9]
        root = "4,null,8,null,5,null,7,null,5,null,2,1,3,null,null,null,6,8,9,null,null,null,3,null,2,null,10,null,7,null,8,3,4,null,null,null,3,5,1,null,null,null,3,1,7,null,null,null,4,7,7,null,null,8,3,null,null,null,6,3,1,null,null,null,1,null,8,null,2,5,5,null,null,1,3,null,null,null,5,null,3,3,5,null,null,null,7,null,10,null,7,null,6,null,8,null,4,null,10,null,6,null,6,9,3,null,null,6,5,null,null,null,5,null,2,null,7,null,5,null,4,8,2,null,null,null,2,null,10,10,8,null,null,null,7,null,2,null,5,8,6,null,null,null,5,null,7,null,3,4,5,null,null,null,4,null,8,null,8,null,8,null,2,null,5,2,9,null,null,null,2,null,3,7,1,null,null,10,1,null,null,null,7,null,6,null,6,null,7,null,7,null,4,4,2,null,null,7,4,null,null,null,7,null,3,7,5,null,null,null,5,null,4,null,9,5,2,null,null,null,4,null,9,null,5,null,5,null,5,null,2,null,5,null,2,null,5,null,7,5,5,null,null,null,6,null,1,null,7,null,3,9,8,null,null,null,4,null,7,4,8,null,null,4,2,null,null,null,3,10,2,null,null,null,7,null,10,null,3,null,1,null,2,null,5,null,9,null,8,null,5,null,9,null,3,null,7,null,10,5,2,null,null,null,2,8,10,null,null,null,4,4,7,null,null,null,5,1,4,null,null,null,10,null,9,null,4,null,9,6,5,null,null,null,7,5,4,null,null,null,8,null,8,4,9,null,null,null,6,9,1,null,null,null,3,3,6,null,null,null,6,null,7,null,2,null,1,null,8,2,9,null,null,null,8,null,3,null,1,9,1,null,null,null,2,null,6,null,1,null,6,3,9,null,null,null,10,null,1,null,9,null,9,null,10,null,2,null,6,null,3,null,7,null,2,null,2,null,2,9,5,null,null,null,5,null,6,null,6,null,2,null,5,7,9,null,null,null,6,10,4,null,null,8,4,null,null,4,2,null,null,4,7,null,null,2,5,null,null,null,4,5,1,null,null,null,3,null,1,10,6,null,null,3,2,null,null,null,6,null,9,null,7,null,5,8,5,null,null,null,5,null,5,10,6,null,null,null,7,null,1,null,6,3,7,null,null,null,9,7,1,null,null,null,7,null,4,null,4,null,9,null,4,null,1,null,10,null,1,10,10,null,null,null,6,null,3,null,1,null,9,null,7,null,6,6,1,null,null,null,9,4,7,null,null,null,3,null,10,null,4,3,3,null,null,null,4,5,10,null,null,null,1,8,10,null,null,null,6,null,9,null,10,null,4,4,9,null,null,null,3,null,3,null,3,null,10,null,10,null,6,8,1,null,null,null,9,7,1,null,null,null,5,null,3,null,10,null,5,null,9,null,5,null,8,null,6,3,2,null,null,null,8,null,8,3,9,null,null,null,9,null,10,3,8,null,null,6,6,null,null,null,6,null,8,null,2,null,9,null,4,null,6,null,4,null,4,null,6,null,9,null,7,null,10,null,1,null,3,null,6,null,7,null,4,null,9,null,1,null,3,8,10,null,null,null,2,null,10,null,4,null,8,null,10,null,7,null,8,5,1,null,null,9,3,null,null,7,8,null,null,null,1,null,1,5,4,null,null,null,1,null,4,5,7,null,null,null,3,null,6,null,6,null,9,null,4,null,1,5,10,null,null,null,3,null,7,null,10,null,8,null,9,2,5,null,null,null,3,null,9,10,6,null,null,null,8,null,7,8,6,null,null,null,6,null,3,null,5,null,4,null,4,null,9,null,6,2,7,null,null,null,9,null,6,1,9,null,null,null,4,null,9,9,9,null,null,null,7,7,1,null,null,null,5,null,5,6,10,null,null,null,4,null,4,10,10,null,null,null,7,2,7,null,null,null,2,null,4,null,5,null,5,10,2,null,null,null,7,9,5,null,null,null,8,null,6,null,10,8,2,null,null,8,10,null,null,null,1,null,1,null,6,5,1,null,null,8,8,null,null,8,4,null,null,null,7,null,10,4,9,null,null,null,7,null,9,null,9,1,7,null,null,4,7,null,null,null,7,null,1,null,5,8,9,null,null,9,8,null,null,9,10,null,null,4,5,null,null,1,1,null,null,null,7,null,6,null,1,null,2,1,10,null,null,2,5,null,null,7,7,null,null,null,7,null,2,null,4,3,10,null,null,null,1,null,7,null,10,7,9,null,null,null,5,4,9,null,null,null,10,6,4,null,null,8,4,null,null,null,1,null,2,null,1,8,1,null,null,null,3,null,2,null,6,null,9,null,2,1,10,null,null,null,5,null,8,2,1,null,null,null,2,3,10,null,null,null,8,null,9,null,5,null,4,null,1,9,10,null,null,4,9,null,null,3,5,null,null,null,6,null,6,9,1,null,null,null,5,null,2,null,2,null,6,null,1,7,9,null,null,null,6,null,8,4,4,null,null,null,2,null,10,null,1,null,2,null,9,null,8,null,2,null,1,10,4,null,null,null,10,null,8,3,2,null,null,null,10,null,3,8,1,null,null,5,3,null,null,null,6,null,8,null,7,2,5,null,null,1,6,null,null,null,8,null,6,null,3,null,8,null,9,null,5,null,2,null,9,null,2,6,10,null,null,7,10,null,null,null,6,null,8,null,7,7,4,null,null,null,3,5,2,null,null,10,4,null,null,null,4,4,3,null,null,null,5,null,1,null,10,null,10,null,5,null,9,null,3,null,8,null,3,null,2,null,4,1,1,null,null,null,7,10,8,null,null,null,9,4,8,null,null,1,2,null,null,9,7,null,null,5,8,null,null,null,9,null,7,null,4,null,4,5,3,null,null,null,2,null,4,3,10,null,null,7,7,null,null,null,2,null,2,8,8,null,null,null,2,null,4,null,5,8,4,null,null,null,9,null,4,null,10,null,4,null,5,null,5,null,1,null,5,null,8,null,5,null,5,null,1,null,10,null,9,null,10,null,2,null,7,5,9,null,null,null,6,4,6,null,null,null,2,null,10,null,1,4,3,null,null,7,8,null,null,null,3,null,3,null,8,null,10,null,6,6,10,null,null,null,1,8,5,null,null,1,3,null,null,null,8,null,9,null,10,null,8,4,9,null,null,10,1,null,null,null,2,null,8,5,2,null,null,8,6,null,null,null,4,null,7,10,1,null,null,null,3,3,3,null,null,null,3,null,5,7,3,null,null,10,9,null,null,null,2,null,8,null,10,null,7,null,10,null,3,9,10,null,null,null,6,4,9,null,null,9,3,null,null,null,7,null,2,null,10,null,10,null,7,null,4,5,7,null,null,9,8,null,null,null,6,3,1,null,null,null,9,null,7,4,4,null,null,null,6,null,1,null,9,null,9,null,3,1,1,null,null,1,8,null,null,null,1,null,2,null,7,4,6,null,null,null,1,null,3,null,8,null,10,null,3,null,10,null,10,null,10,null,10,null,10,null,6,null,7,null,3,null,9,null,7,5,4,null,null,null,5,null,5,1,3,null,null,null,6,3,4,null,null,null,3,2,10,null,null,10,5,null,null,null,5,9,1,null,null,null,8,null,7,null,9,5,3,null,null,null,2,null,7,null,10,null,2,9,4,null,null,null,4,10,10,null,null,null,6,2,6,null,null,null,4,null,5,null,7,null,7,null,2,4,1,null,null,null,7,null,5,8,8,null,null,3,6,null,null,null,1,null,5,null,8,4,6,null,null,null,6,null,9,null,4,null,4,null,3,null,2,6,9,null,null,null,6,6,8,null,null,null,7,null,5,null,5,null,9,4,3,null,null,null,10,4,6,null,null,null,9,null,3,null,10,null,9,null,1,null,6,null,1,null,4,null,5,5,3,null,null,7,8,null,null,null,6,null,6,null,5,9,4,null,null,null,9,null,7,null,7,7,5,null,null,null,7,null,3,8,3,null,null,null,1,5,4,null,null,null,2,null,3,null,4,null,5,5,6,null,null,null,2,null,2,7,9,null,null,9,5,null,null,null,9,null,9,null,8,7,6,null,null,null,2,null,9,null,2,null,7,6,4,null,null,null,1,null,7,null,2,null,7,null,3,9,2,null,null,4,5,null,null,null,3,null,2,null,8,7,8,null,null,7,7,null,null,null,10,null,9,2,7,null,null,6,3,null,null,null,10,null,5,null,7,null,9,null,3,null,1,null,9,null,2,5,2,null,null,null,4,null,8,null,6,10,10,null,null,10,3,null,null,null,3,null,1,null,3,null,8,3,2,null,null,null,5,2,8,null,null,7,5,null,null,7,7,null,null,null,1,6,5,null,null,null,2,null,4,null,7,null,5,null,3,null,7,null,10,null,10,null,7,null,9,null,5,5,5,null,null,null,9,null,4,null,7,null,6,null,2,null,3,null,3,8,10,null,null,null,1,null,3,null,6,null,10,null,8,null,6,4,5,null,null,null,6,null,3,null,3,null,8,1,3,null,null,2,3,null,null,null,7,null,10,null,2,null,10,null,2,null,7,null,10,6,7,null,null,3,4,null,null,6,2,null,null,null,9,null,8,null,7,null,10,null,9,10,1,null,null,null,5,1,10,null,null,10,2,null,null,null,2,5,8,null,null,null,9,8,8,null,null,null,8,null,4,1,3,null,null,null,4,null,4,null,9,null,4,10,7,null,null,10,4,null,null,4,5,null,null,9,2,null,null,3,7,null,null,8,7,null,null,null,5,null,10,null,3,null,8,null,3,null,5,2,9,null,null,null,10,null,3,null,10,null,7,5,1,null,null,2,4,null,null,null,5,null,2,null,6,null,8,null,9,null,10,null,9,null,6,null,2,6,7,null,null,2,7,null,null,null,3,null,6,9,5,null,null,2,6,null,null,null,8,null,4,null,8,null,2,4,9,null,null,4,7,null,null,null,9,null,5,null,3,null,8,null,6,null,5,7,4,null,null,8,7,null,null,null,9,1,2,null,null,null,9,6,7,null,null,null,8,null,6,null,6,4,6,null,null,null,3,null,5,10,4,null,null,null,5,null,8,null,8,null,7,null,10,5,10,null,null,null,10,null,10,null,10,8,2,null,null,5,3,null,null,null,8,6,6,null,null,10,8,null,null,1,8,null,null,null,9,1,6,null,null,7,6,null,null,null,10,5,4,null,null,null,10,5,4,null,null,2,5,null,null,null,4,2,5,null,null,null,3,null,4,2,8,null,null,null,5,null,9,null,3,9,3,null,null,null,5,null,7,null,7,null,5,null,10,null,3,2,7,null,null,3,8,null,null,null,10,2,3,null,null,null,7,3,3,null,null,null,6,null,4,null,8,null,3,null,3,null,1,null,9,10,1,null,null,null,1,null,6,6,5,null,null,6,3,null,null,null,6,null,4,null,2,null,10,null,9,2,5,null,null,null,10,null,10,3,5,null,null,10,6,null,null,1,9,null,null,6,7,null,null,6,5,null,null,null,8,null,8,5,6,null,null,null,6,null,8,null,8,null,4,null,6,null,9,null,2,null,1,null,10,null,9,null,9,null,4,1,6,null,null,null,1,null,3,null,4,10,8,null,null,null,7,null,5,null,10,null,1,null,9,null,9,null,9,1,8,null,null,null,1,null,9,5,1,null,null,7,1,null,null,null,8,null,1,8,6,null,null,2,9,null,null,10,5,null,null,null,2,null,10,null,10,null,9,null,10,null,7,null,7,null,5,null,8,8,2,null,null,null,9,null,10,null,1,null,1,null,1,null,10,6,1,null,null,null,9,null,2,9,9,null,null,null,9,3,8,null,null,null,1,null,10,1,10,null,null,null,8,null,7,null,8,null,8,6,5,null,null,2,5,null,null,null,7,null,1,null,10,null,4,8,5,null,null,5,2,null,null,2,3,null,null,null,6,3,10,null,null,1,8,null,null,null,9,null,8,7,10,null,null,null,10,null,5,10,6,null,null,null,5,null,6,null,5,6,6,null,null,5,8,null,null,null,7,null,8,null,10,1,1,null,null,null,10,1,2,null,null,9,5,null,null,null,7,4,5,null,null,null,10,null,3,null,5,null,8,null,2,null,9,null,9,6,7,null,null,7,1,null,null,null,5,null,2,null,8,5,3,null,null,null,7,null,6,null,6,null,7,null,5,null,1,6,7,null,null,null,6,null,8,null,8,null,5,10,10,null,null,null,10,5,2,null,null,6,5,null,null,8,1,null,null,2,3,null,null,9,3,null,null,10,7,null,null,1,4,null,null,5,10,null,null,null,7,null,6,null,1,null,9,null,8,null,2,10,7,null,null,null,5,3,9,null,null,null,2,null,7,null,3,null,7,null,7,9,2,null,null,null,5,null,6,1,2,null,null,5,10,null,null,6,9,null,null,null,10,9,8,null,null,5,9,null,null,null,10,5,6,null,null,null,10,10,1,null,null,null,7,null,10,null,3,null,2,null,6,9,9,null,null,2,5,null,null,null,1,null,8,null,2,null,4,2,9,null,null,null,10,null,6,null,5,2,3,null,null,null,1,null,7,null,10,6,10,null,null,null,2,5,9,null,null,4,7,null,null,null,2,1,1,null,null,null,9,null,5,7,7,null,null,null,3,null,4,null,10,2,6,null,null,8,6,null,null,1,10,null,null,null,10,4,4,null,null,null,7,null,8,7,5,null,null,null,2,10,6,null,null,3,6,null,null,null,10,null,8,null,8,8,9,null,null,null,7,null,8,null,1,null,5,null,8,null,7,10,6,null,null,null,3,null,5,null,6,9,10,null,null,null,10,null,6,null,2,null,2,null,2,null,9,null,7,null,4,5,9,null,null,null,4,null,4,null,3,null,10,null,3,10,3,null,null,5,7,null,null,null,6,null,3,3,4,null,null,null,7,null,6,null,10,null,5,8,8,null,null,null,4,5,5,null,null,null,2,null,10,null,2,null,1,2,8,null,null,null,5,null,8,null,3,null,4,null,8,null,1,null,5,8,1,null,null,3,9,null,null,null,3,1,1,null,null,5,9,null,null,null,6,null,9,5,6,null,null,null,5,3,5,null,null,null,9,3,1,null,null,3,5,null,null,3,10,null,null,null,10,null,8,null,1,null,7,null,4,null,1,null,7,null,1,null,3,7,9,null,null,1,2,null,null,null,8,3,7,null,null,null,8,null,1,6,6,null,null,null,9,7,4,null,null,6,10,null,null,4,5,null,null,null,1,null,7,null,6,7,3,null,null,null,6,null,9,null,8,2,6,null,null,6,8,null,null,2,7,null,null,null,8,null,8,7,5,null,null,null,4,null,9,5,3,null,null,9,5,null,null,null,5,null,1,null,5,null,6,8,6,null,null,null,5,null,4,null,2,8,5,null,null,null,9,null,5,null,9,null,3,null,5,9,3,null,null,null,2,null,7,null,8,null,8,null,8,null,10,7,2,null,null,null,6,null,2,1,10,null,null,null,6,null,8,null,4,null,6,8,5,null,null,null,3,null,1,null,6,null,6,null,2,null,9,1,9,null,null,null,3,null,7,4,7,null,null,9,6,null,null,7,8,null,null,null,1,5,1,null,null,7,10,null,null,null,6,null,8,3,2,null,null,1,5,null,null,null,8,null,3,null,3,9,1,null,null,null,8,null,1,3,5,null,null,null,9,null,8,3,4,null,null,null,9,null,1,null,3,null,7,null,3,5,1,null,null,null,4,null,1,null,5,null,1,null,3,4,8,null,null,null,1,10,7,null,null,null,1,null,9,null,7,null,3,null,10,6,9,null,null,null,3,6,8,null,null,null,8,null,3,null,4,null,10,null,2,10,7,null,null,5,4,null,null,null,4,2,6,null,null,1,10,null,null,null,4,3,7,null,null,null,4,null,1,null,6,null,10,null,7,4,9,null,null,null,10,9,4,null,null,null,6,5,9,null,null,null,7,1,7,null,null,null,4,null,4,null,4,null,6,4,3,null,null,null,4,null,5,null,10,null,2,null,1,null,1,null,2,null,2,9,4,null,null,null,9,null,9,9,4,null,null,null,5,null,6,null,2,null,3,null,10,9,10,null,null,10,2,null,null,3,9,null,null,null,9,null,10,null,9,null,3,null,1,5,6,null,null,null,6,null,2,null,9,null,3,null,9,9,3,null,null,5,3,null,null,null,2,null,3,null,8,null,2,null,9,null,3,null,4,null,3,null,4,null,8,6,7,null,null,null,6,null,3,null,1,null,9,5,1,null,null,null,2,null,7,4,7,null,null,null,2,null,9,null,7,null,10,null,6,null,7,null,1,null,4,null,5,null,2,null,7,null,3,null,7,null,4,null,5,null,10,null,1,null,9,9,8,null,null,10,10,null,null,null,6,6,10,null,null,10,4,null,null,4,6,null,null,null,4,null,3,null,5,4,8,null,null,null,5,6,3,null,null,1,7,null,null,9,4,null,null,null,9,10,2,null,null,null,5,null,6,2,5,null,null,null,10,5,1,null,null,null,8,2,2,null,null,7,6,null,null,null,9,null,4,null,4,null,2,null,4,null,8,1,10,null,null,null,8,null,3,null,1,null,5,null,2,null,9,8,5,null,null,8,6,null,null,null,1,null,6,null,2,2,9,null,null,null,9,5,7,null,null,null,4,null,5,4,5,null,null,1,1,null,null,8,3,null,null,null,10,7,10,null,null,6,5,null,null,6,3,null,null,4,1,null,null,10,1,null,null,4,2,null,null,6,3,null,null,null,2,null,9,null,10,9,9,null,null,null,2,null,8,null,8,6,2,null,null,10,7,null,null,null,10,1,3,null,null,2,3,null,null,null,10,3,1,null,null,null,9,null,4,null,3,null,4,null,7,null,2,null,1,null,9,null,1,null,7,null,9,null,7,null,6,7,9,null,null,null,10,null,6,3,2,null,null,null,4,null,4,null,5,4,1,null,null,null,3,null,3,null,6,null,5,null,4,10,5,null,null,4,6,null,null,10,4,null,null,null,7,null,10,null,1,null,1,5,6,null,null,9,7,null,null,null,3,null,6,null,8,null,2,null,4,null,2,null,7,null,8,3,10,null,null,null,6,null,3,null,7,null,4,2,3,null,null,1,9,null,null,5,6,null,null,6,6,null,null,null,7,null,8,9,9,null,null,null,9,null,1,null,9,null,5,null,1,null,5,2,6,null,null,null,9,2,4,null,null,3,6,null,null,4,2,null,null,null,9,null,6,3,3,null,null,null,7,null,9,null,6,2,9,null,null,null,8,null,5,null,4,null,7,null,4,null,8,null,5,3,2,null,null,null,1,null,1,null,1,null,1,null,1,null,1,null,4,null,6,3,7,null,null,9,7,null,null,9,2,null,null,null,4,null,1,null,5,null,8,null,2,10,1,null,null,null,10,null,1,2,7,null,null,null,5,null,8,null,7,2,6,null,null,null,10,null,3,null,7,null,3,null,6,9,4,null,null,null,2,null,8,null,8,null,1,null,8,null,8,null,9,null,7,null,5,10,9,null,null,4,4,null,null,null,7,null,6,null,8,1,3,null,null,9,3,null,null,1,10,null,null,null,9,8,2,null,null,null,8,null,4,null,4,4,1,null,null,null,7,null,8,1,9,null,null,null,10,null,3,6,7,null,null,null,5,5,2,null,null,null,4,null,5,6,6,null,null,7,7,null,null,5,10,null,null,null,6,10,6,null,null,null,2,null,5,2,5,null,null,null,7,null,7,null,7,null,4,null,9,null,4,null,8,null,1,null,5,null,9,6,4,null,null,null,8,9,2,null,null,10,2,null,null,null,3,null,4,null,10,null,6,null,10,2,9,null,null,6,1,null,null,null,7,6,6,null,null,null,2,null,4,null,10,8,9,null,null,null,7,3,9,null,null,10,4,null,null,null,10,null,6,null,2,null,5,null,1,null,8,8,3,null,null,null,2,5,10,null,null,5,8,null,null,3,10,null,null,null,5,null,8,null,5,null,4,null,5,6,2,null,null,null,7,null,5,null,10,null,8,1,5,null,null,null,1,null,1,null,5,null,9,null,6,null,1,null,5"
        head=make_linked_list(head)
        root = deserialize(root)
        Output= False
        self.assertEqual(Output,get_sol().isSubPath(head,root))
    def test_6(self):
        head = [30,37,43,47,30,41,32,18,26,16,42,8,10,24,15,34]
        root = "48,45,37,31,null,41,30,43,null,49,34,35,37,null,null,8,37,37,37,19,22,20,43,32,null,49,null,19,10,12,46,34,20,33,19,null,23,47,26,null,null,27,13,null,40,39,45,17,34,4,16,47,31,28,40,31,21,31,14,40,14,30,40,30,21,18,null,null,null,null,null,9,3,24,11,38,26,null,23,15,38,24,22,9,6,13,16,13,28,7,null,26,null,33,39,2,17,8,14,19,7,null,null,41,26,22,22,null,null,36,null,32,5,null,null,30,null,13,42,9,25,25,null,46,null,null,null,34,38,null,27,null,null,null,32,null,36,42,null,8,22,21,null,12,null,30,41,null,null,50,24,13,7,23,42,45,45,33,29,11,7,27,13,26,null,8,null,32,48,null,18,7,11,12,23,32,50,10,null,null,6,null,null,47,null,11,1,null,null,null,22,49,22,null,null,null,null,4,null,30,null,null,null,25,16,36,17,19,11,12,null,null,null,42,33,null,null,30,17,null,null,null,29,null,45,29,20,38,8,37,null,37,4,6,null,47,50,13,41,44,null,22,47,12,null,21,3,41,23,null,null,26,18,null,34,null,null,null,49,null,null,30,null,null,10,null,null,null,null,4,null,null,null,null,22,17,17,null,null,null,null,null,null,null,null,null,null,null,null,25,6,33,19,24,12,35,3,29,45,33,43,null,50,null,null,null,null,3,36,32,null,null,null,null,null,9,29,48,null,7,3,13,31,null,45,33,38,22,30,null,null,30,44,48,30,null,20,null,null,null,26,36,28,null,null,null,null,15,6,null,33,40,4,null,null,null,40,26,null,null,null,null,1,null,null,null,null,null,null,15,null,6,null,null,3,null,null,11,null,null,null,null,7,6,46,null,40,2,37,null,null,null,null,17,8,5,1,39,8,34,null,null,null,null,null,17,null,30,29,43,3,48,10,36,34,47,50,null,24,null,null,36,38,27,22,23,18,null,23,22,18,null,16,42,null,13,33,null,35,null,4,20,null,8,40,40,38,28,30,24,37,null,null,33,null,null,null,null,null,22,16,null,null,null,null,null,null,null,null,null,null,5,46,8,null,10,29,null,5,25,null,null,7,null,26,33,44,50,48,null,null,33,null,null,11,50,null,null,null,null,null,21,27,null,null,null,23,10,19,14,35,null,11,30,33,null,47,39,17,12,18,null,15,14,null,32,34,null,null,null,null,null,null,25,9,null,27,10,44,6,null,null,null,null,50,null,null,44,null,null,null,null,null,null,null,27,18,34,null,null,40,11,37,null,26,null,null,null,null,null,null,35,null,42,null,10,37,41,41,null,null,null,9,null,null,null,null,null,48,45,20,null,39,null,null,34,null,null,null,48,null,19,1,null,null,null,null,16,21,null,null,null,null,15,26,11,null,3,null,null,null,null,null,19,43,49,11,null,12,26,25,28,29,18,15,9,33,35,null,null,null,41,38,null,46,11,null,29,null,47,null,26,5,null,4,null,9,12,null,null,null,null,null,null,39,null,null,null,44,null,null,null,38,null,28,null,null,8,5,8,50,null,5,null,null,null,38,null,null,23,7,null,null,null,null,null,2,11,null,14,32,null,null,38,null,21,null,13,null,29,39,null,7,29,43,null,15,null,null,null,31,null,35,null,null,10,null,null,null,null,21,null,null,null,46,null,null,null,18,null,null,null,43,null,null,41,15,null,null,null,null,null,null,null,42,23,23,null,null,null,null,42,25,null,25,null,null,null,28,null,null,32,9,null,null,10,3,38,8,null,null,null,null,5,null,null,null,null,null,20,17,null,12,null,35,null,null,null,null,20,null,null,12,null,17,47,7,27,16,null,null,null,null,null,null,1,null,37,45,null,null,null,null,null,null,null,5,null,null,null,null,null,14,43,26,null,null,null,null,38,null,50,null,null,null,null,null,null,null,null,null,8,null,49,24,22,24,null,null,45,null,47,5,null,null,17,null,43,null,null,33,null,11,null,null,34,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,32,null,null,42,21,null,26,12,null,null,null,30,27,32,15,25,49,5,null,47,null,null,36,null,null,null,41,null,null,null,null,null,null,null,null,32,null,null,null,null,null,null,14,48,null,null,null,34,null,null,49,null,null,11,34,null,null,45,23,null,null,41,null,null,null,null,null,null,null,null,null,null,49,41,47,null,null,9,null,null,null,17,50,null,null,null,null,null,null,null,24,null,null,null,null,17,31,null,null,null,null,null,null,null,8"
        head=make_linked_list(head)
        root = deserialize(root)
        Output= True
        self.assertEqual(Output,get_sol().isSubPath(head,root))
    def test_7(self):
        head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
        root = "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,1,1,null,1,1,1,null,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,null,1,1,1,1,null,null,null,null,null,1,null,1,1,1,1,1,null,1,1,null,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,null,1,1,1,1,1,null,1,1,null,1,1,null,null,1,1,1,1,1,1,null,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,null,null,null,null,null,1,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,null,1,null,1,1,1,1,1,1,1,1,1,null,1,null,null,1,1,1,null,null,1,null,null,1,null,1,1,null,1,1,1,1,1,1,1,1,null,1,null,1,null,1,1,1,1,1,null,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,1,1,null,1,null,null,null,null,1,1,null,1,1,1,1,1,1,1,null,1,1,null,null,null,1,null,null,1,1,1,1,1,1,1,1,null,1,null,null,null,null,null,null,1,1,1,null,1,null,null,1,1,1,1,1,null,null,1,1,1,1,null,null,1,null,1,1,1,null,1,1,null,null,1,1,1,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,1,1,1,1,null,1,null,1,1,1,1,1,null,null,null,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,1,null,null,1,null,1,1,null,1,1,1,1,1,1,1,1,1,null,null,1,null,1,1,null,null,1,1,1,1,1,1,1,null,1,1,null,null,null,1,1,null,null,1,null,null,1,1,null,null,null,1,null,null,null,null,null,1,null,1,1,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,1,null,1,null,null,1,1,null,1,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,null,1,1,1,1,null,null,1,null,null,null,null,1,1,null,null,null,1,1,null,null,1,1,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,null,null,1,1,null,1,1,1,1,null,1,1,1,1,1,1,1,1,null,null,1,1,1,1,1,1,1,1,1,null,1,1,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,null,1,1,1,1,1,null,null,1,1,1,null,null,1,1,1,null,1,1,1,1,null,null,null,null,1,null,1,1,1,1,1,1,1,null,null,null,null,1,null,null,1,1,1,null,1,1,null,1,1,1,null,1,1,1,null,1,1,null,null,null,1,1,null,1,1,1,null,1,null,null,null,null,null,null,null,1,1,1,1,1,1,1,1,null,null,null,null,null,null,1,null,null,1,null,null,1,1,null,1,null,1,1,null,null,null,null,null,1,null,1,null,null,1,1,null,null,1,1,1,1,1,1,1,null,1,1,1,null,1,1,1,null,null,null,null,1,null,1,1,null,1,null,null,null,null,null,1,null,null,1,1,null,1,null,null,1,null,1,null,1,null,1,1,1,1,null,null,null,null,1,1,null,null,1,null,1,1,1,1,1,1,1,null,1,null,1,1,1,1,1,1,null,null,null,null,null,null,1,1,null,null,1,null,null,null,1,null,1,1,1,null,1,1,1,1,null,null,null,1,null,1,null,null,null,1,null,null,null,1,null,1,1,1,null,1,1,1,1,1,1,1,1,null,1,1,1,1,null,null,null,null,1,null,1,1,null,null,1,null,null,null,null,null,null,null,1,1,1,1,1,1,1,1,null,null,1,1,null,null,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,null,1,null,1,1,null,null,1,1,null,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,null,null,null,null,1,null,null,null,null,null,null,1,1,1,null,null,null,1,1,null,1,1,1,1,null,1,1,null,null,null,null,1,1,1,1,null,1,1,null,null,1,null,1,1,1,1,1,1,1,1,null,null,null,null,1,1,null,1,null,null,null,1,1,null,1,null,1,1,null,null,null,null,1,1,null,1,1,1,1,1,null,1,1,null,null,null,1,null,null,1,1,1,1,1,1,1,null,null,1,1,null,1,1,null,1,1,null,1,null,null,1,1,null,1,1,null,1,1,1,1,1,1,1,1,1,null,1,1,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,1,1,null,null,null,null,1,null,null,1,null,1,null,1,null,null,null,1,null,null,1,null,1,null,null,1,null,null,1,1,1,null,1,1,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,1,1,1,null,null,null,1,null,null,null,null,null,1,1,null,null,1,1,1,null,1,1,1,1,1,1,1,1,1,1,null,null,1,1,null,1,1,1,1,1,1,1,null,1,null,null,1,1,null,1,null,null,null,null,1,null,null,null,null,null,null,1,null,null,1,1,null,null,1,1,1,1,1,1,1,1,1,1,1,null,1,null,null,null,null,1,1,1,1,1,1,null,null,1,null,1,null,1,null,null,1,null,null,null,1,1,1,1,1,null,1,1,1,null,null,1,1,1,1,1,1,1,1,1,null,null,null,null,null,1,null,1,null,1,null,1,1,1,1,1,1,1,null,1,1,1,1,1,1,null,null,1,1,null,1,null,null,null,1,1,null,null,1,1,null,1,1,null,1,1,1,1,null,null,1,null,1,1,1,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,1,null,1,1,null,1,1,null,null,1,1,null,1,1,1,1,1,1,null,null,1,1,null,null,1,null,null,null,1,null,1,null,1,null,1,1,1,1,1,1,1,1,null,1,1,1,1,null,1,null,null,1,1,1,1,null,1,1,1,1,1,null,1,null,null,null,1,1,1,null,1,null,null,1,1,null,null,null,null,null,null,1,null,null,1,1,1,1,null,null,null,1,1,1,null,null,null,null,null,1,null,1,null,1,null,null,null,null,1,1,null,null,1,1,1,null,null,1,1,1,null,null,null,1,null,1,1,1,null,1,null,null,null,null,1,1,1,1,1,null,null,null,1,null,null,1,null,1,1,1,1,1,1,null,null,null,1,1,1,null,null,1,null,null,null,1,null,null,1,1,null,null,1,null,null,null,null,1,1,null,1,1,1,1,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,1,null,null,null,1,1,null,1,null,1,1,null,1,null,1,1,1,null,null,null,1,null,1,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null,1,1,1,1,null,null,1,1,null,1,1,1,1,1,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null,null,null,1,1,1,1,1,1,1,1,null,null,1,null,1,1,null,1,null,null,1,1,1,1,null,1,null,1,null,null,null,1,null,null,null,null,null,null,null,1,1,1,1,1,1,1,1,1,null,null,null,null,null,null,1,1,1,1,1,1,null,1,1,1,1,1,1,null,1,null,1,1,null,null,1,1,null,null,null,1,1,null,null,1,1,1,1,1,null,1,1,null,null,null,null,null,null,1,null,null,1,1,null,1,null,null,1,1,null,null,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,null,null,1,null,1,1,1,null,1,1,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,null,null,null,null,null,1,1,null,1,1,1,null,null,null,1,1,1,1,1,null,1,null,1,null,null,1,null,1,1,null,1,null,1,1,null,null,1,null,null,1,null,null,null,null,null,null,1,null,1,null,1,null,1,1,1,1,1,null,1,1,1,1,1,1,null,null,1,null,null,null,null,null,1,1,1,1,null,null,null,1,1,1,1,null,1,null,1,1,null,null,null,null,1,1,1,null,1,null,null,null,null,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,1,1,null,null,1,1,null,null,null,1,1,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,1,1,null,null,null,null,null,1,null,1,1,null,null,null,1,1,1,null,null,1,1,null,null,1,1,1,null,null,null,null,null,null,1,null,1,1,1,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,1,1,null,1,1,null,1,1,1,null,null,null,null,null,null,null,1,1,null,1,1,null,null,null,1,1,1,null,1,1,1,null,1,null,null,null,1,1,null,null,null,1,null,1,null,1,1,null,null,null,null,null,1,null,1,1,1,1,1,null,1,1,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,1,null,null,null,1,1,1,1,1,null,1,1,1,null,1,null,null,1,1,null,null,null,1,null,1,null,1,null,1,1,null,null,null,null,1,null,1,1,null,null,1,1,1,1,null,1,null,1,null,null,1,1,1,1,1,1,null,null,null,null,1,null,null,1,null,null,1,null,1,1,1,1,null,1,1,1,1,1,1,1,1,1,null,1,null,null,null,null,null,null,1,1,1,null,1,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,1,null,null,null,null,null,null,null,null,1,1,1,1,null,1,1,1,1,1,1,null,1,1,null,1,1,1,1,null,null,1,null,null,1,1,1,1,1,1,1,null,null,1,1,1,null,1,1,1,1,null,1,1,1,1,null,null,1,1,1,1,1,1,null,null,1,1,1,1,1,null,1,1,1,null,null,null,1,null,1,1,null,null,1,1,1,1,1,null,null,1,1,1,1,1,null,null,1,null,null,null,1,1,1,1,null,null,null,null,null,null,null,null,null,null,1,null,1,1,null,null,1,null,1,null,null,null,null,null,null,null,1,null,1,null,1,1,null,1,null,1,1,null,1,null,null,null,null,null,null,null,1,null,null,null,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,1,null,1,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,1,null,null,null,1,null,null,1,1,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,1,1,null,null,1,1,1,null,null,null,1,1,null,null,1,1,1,null,null,1,null,1,1,null,null,null,null,null,1,1,1,1,null,null,1,null,null,null,null,null,null,1,null,null,null,null,1,null,null,null,null,1,1,null,1,1,1,null,null,null,1,null,null,1,1,null,null,null,1,null,null,null,1,1,null,null,null,null,null,null,1,null,1,1,null,null,null,null,null,1,null,1,null,1,null,null,1,null,1,1,null,null,null,1,1,1,1,1,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,1,null,null,null,1,1,1,null,null,null,null,null,null,null,null,null,1,1,1,null,1,null,null,null,null,null,1,1,1,null,null,1,null,null,1,null,null,null,1,null,null,1,1,1,1,1,1,1,1,null,1,null,null,1,1,1,null,1,null,1,1,1,1,1,1,1,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,1,null,null,null,null,null,1,1,1,1,1,1,1,null,1,null,1,null,1,1,null,1,1,1,1,null,null,null,null,null,null,null,null,1,1,1,1,1,1,1,1,null,null,1,null,null,null,1,null,1,null,null,null,1,1,null,null,1,null,1,1,1,null,1,1,1,1,null,null,1,1,1,null,1,1,1,1,1,null,null,null,1,null,1,1,1,1,1,1,null,1,1,null,1,null,null,null,null,1,1,null,null,null,1,null,1,1,null,null,1,1,1,null,null,null,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null,1,null,null,1,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,1,1,null,1,1,1,1,null,null,null,1,null,null,null,null,null,null,null,null,1,1,1,1,null,1,1,null,1,null,null,null,null,null,1,null,1,1,1,null,1,1,null,null,null,null,1,1,null,1,null,null,null,null,1,1,1,1,null,null,null,null,null,null,null,1,null,null,1,1,1,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,1,null,1,1,null,null,null,null,null,null,1,1,null,null,1,null,1,1,null,null,1,null,null,null,null,null,1,null,null,1,null,1,null,null,null,null,1,null,null,null,1,null,null,1,null,1,1,null,1,1,null,null,null,null,null,null,1,null,null,null,1,null,null,null,null,1,null,null,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,1,null,1,null,1,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,null,null,null,1,null,null,null,null,null,1,null,1,1,null,1,1,1,1,1,1,1,null,null,null,null,1,1,null,1,null,null,1,1,null,null,1,1,1,null,null,1,null,1,null,null,null,null,null,null,null,1,null,null,1,1,null,null,null,1,1,null,1,null,null,1,1,1,null,1,1,1,1,1,null,1,1,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,1,1,null,null,null,null,1,1,null,null,1,null,null,null,1,null,null,null,null,null,1,null,null,1,null,1,null,null,null,null,null,null,1,1,null,null,1,1,null,1,1,1,1,null,1,1,null,null,1,null,null,null,null,null,null,1,null,null,1,null,1,1,null,1,null,1,1,null,null,null,1,null,null,null,null,null,null,null,null,null,1,1,null,1,null,null,null,null,null,1,1,1,null,1,1,null,1,1,1,null,null,null,null,1,null,1,1,null,1,null,null,1,1,null,null,null,1,null,null,null,null,null,1,1,null,null,null,null,null,null,1,null,null,1,1,1,null,null,null,null,1,1,null,1,null,1,null,null,1,null,null,null,null,null,null,null,1,null,1,1,1,null,1,1,1,1,null,null,1,null,1,1,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,1,null,null,1,null,null,null,null,null,null,null,1,1,null,1,1,1,null,1,1,null,null,null,null,null,1,null,null,null,null,1,1,1,1,1,null,1,null,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,null,1,null,null,1,null,null,null,1,null,null,null,null,null,null,1,1,1,1,1,null,1,null,1,null,null,null,1,1,1,null,null,null,1,null,null,null,1,1,1,null,null,null,null,null,null,null,1,null,null,1,null,null,null,null,1,null,null,1,null,1,null,1,1,1,null,1,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,1,null,1,null,1,null,1,1,null,1,1,null,null,null,null,1,null,null,1,1,1,null,null,1,null,1,null,1,null,1,null,1,1,null,null,null,null,null,1,null,null,null,null,1,1,null,null,null,null,null,null,1,1,null,null,1,1,null,null,null,null,null,null,1,null,1,1,1,null,null,null,1,1,null,null,1,null,1,1,1,null,null,null,null,1,1,1,null,null,1,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,null,1,1,null,null,1,1,1,null,1,1,1,1,null,null,1,1,1,null,1,null,null,null,null,null,null,1,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,1,null,null,null,null,null,null,null,null,null,1,1,null,1,null,1,null,null,1,null,null,null,null,null,null,null,null,1,1,null,1,null,null,null,1,null,1,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,1,null,null,1,null,1,null,1,null,1,null,null,null,1,null,null,null,null,null,1,null,null,1,null,null,1,null,null,null,null,1,null,null,1,null,null,null,null,1,null,1,null,1,null,null,null,1,1,null,null,null,null,1,1,null,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,null,null,1,null,1,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,null,null,null,null,1,null,null,null,1,1,null,null,null,null,null,1,1,null,null,null,null,null,1,1,null,null,null,1,1,1,1,null,null,null,null,null,null,null,null,null,null,1,1,null,1,null,null,null,null,null,null,null,1,1,null,null,null,null,1,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,1,null,1,null,null,1,null,null,1,1,null,null,null,null,null,null,null,null,null,null,1,1,null,null,1,null,null,null,null,null,1,null,null,null,null,null,1,null,1,null,null,null,null,null,null,1,1,null,null,1,null,null,1,null,null,null,1,1,null,1,null,null,1,1,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,1,null,1,null,null,null,null,1,null,null,null,1,null,null,1,1,null,1,null,null,null,null,1,null,null,null,null,1,1,null,null,null,null,null,1"
        head=make_linked_list(head)
        root = deserialize(root)
        Output= False
        self.assertEqual(Output,get_sol().isSubPath(head,root))
