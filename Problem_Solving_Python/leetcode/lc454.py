from itertools import accumulate; from math import floor,ceil,sqrt; import operator; import random; import string; from bisect import *; from collections import deque, defaultdict, Counter, OrderedDict; from functools import reduce,cache; from heapq import *; import unittest; from typing import List,Optional; from functools import cache; from operator import lt, gt
from binary_tree_tester import ser,des; from a_linked_list import make_linked_list
def get_sol(): return Solution()
class Solution:
    # time O(n^2) space O(n^2)
    def fourSumCount(self, A: List[int], B: List[int], C: List[int], D: List[int]) -> int:
        di=defaultdict(int)
        for c in C:
            for d in D:
                di[c+d]+=1
        count=0
        target=0
        for a in A:
            for b in B:
                if target-(a+b) in di:
                    count+=di[target-(a+b)]
        return count
class Solution2:
    # time O(n*n*2*n) space O(n^2)
    def fourSumCount(self, A: List[int], B: List[int], C: List[int], D: List[int]) -> int:
        n=len(A)
        A.sort();B.sort();C.sort();D.sort()
        res=0
        di=defaultdict(int)
        for c in C: # fix an element in C
            for d in D: # fix an element in D
                di[c+d]+=1
        for c_plus_d in di:
            target=0-c_plus_d
            i,j=0,n-1
            while i<n and j>=0:
                if A[i]+B[j]<target:
                    if i<n:
                        i+=1
                    else:
                        j-=1
                elif A[i]+B[j]>target:
                    if j>=0:
                        j-=1
                    else:
                        i+=1
                else:
                    iCopy=i
                    cnt1=0
                    while iCopy<n and A[iCopy]+B[j]==target:
                        cnt1+=1
                        iCopy+=1

                    jCopy=j
                    cnt2=0
                    while jCopy>=0 and A[i]+B[jCopy]==target:
                        cnt2+=1
                        jCopy-=1

                    res+=cnt1*cnt2*di[c_plus_d]
                    i=iCopy
                    j=jCopy
        return res
class Solution3:
    # TLE. time O(n*n*2*n) space O(1)
    def fourSumCount(self, A: List[int], B: List[int], C: List[int], D: List[int]) -> int:
        n=len(A)
        A.sort();B.sort();C.sort();D.sort()
        res=0
        for c in C: # fix an element in C
            for d in D: # fix an element in D
                s=c+d
                i,j=0,n-1
                target=0-s
                while i<n and j>=0:
                    if A[i]+B[j]<target:
                        if i<n-1:
                            i+=1
                        else:
                            j-=1
                    elif A[i]+B[j]>target:
                        if j>0:
                            j-=1
                        else:
                            i+=1
                    else:
                        iCopy=i
                        cnt1=0
                        while iCopy<n and A[iCopy]+B[j]==target:
                            cnt1+=1
                            iCopy+=1

                        jCopy=j
                        cnt2=0
                        while jCopy>=0 and A[i]+B[jCopy]==target:
                            cnt2+=1
                            jCopy-=1

                        res+=cnt1*cnt2
                        i=iCopy
                        j=jCopy
        return res

class MyTestCase(unittest.TestCase):
    def test01(self):
        self.assertEqual(2, get_sol().fourSumCount([ 1, 2], [-2,-1], [-1, 2], [ 0, 2]))
    def test02(self):
        self.assertEqual(76, get_sol().fourSumCount([1,1,-1,-1], [-1,-1,1,1], [1,-1,0,-1], [1,1,-1,1]))
    def test03(self):
        self.assertEqual(8, get_sol().fourSumCount([1,1], [-1,-1], [1,-1], [1,1]))
    def test04(self):
        self.assertEqual(66391, get_sol().fourSumCount([-268435441,-268434600,-268434993,-268435357,-268434692,-268434749,-268435266,-268434456,-268435317,-268435261,-268434827,-268434527,-268434811,-268435165,-268434656,-268434992,-268435385,-268434456,-268435410,-268434590,-268434935,-268434512,-268434502,-268434664,-268435392,-268434592,-268435183,-268435301,-268434930,-268434781,-268434664,-268434995,-268434516,-268434576,-268434474,-268434804,-268435168,-268435241,-268435199,-268434821,-268435402,-268434891,-268435214,-268435340,-268434576,-268434926,-268434902,-268434708,-268435048,-268434793,-268435363,-268435362,-268434993,-268434744,-268435010,-268435001,-268434781,-268434601,-268434736,-268435173,-268435376,-268435321,-268435392,-268435342,-268434630,-268434862,-268435263,-268434841,-268434809,-268435181,-268435184,-268434859,-268434464,-268434702,-268434729,-268434794,-268434935,-268434483,-268434948,-268434482,-268435152,-268434781,-268434622,-268434650,-268435405,-268434901,-268434927,-268435189,-268435028,-268435401,-268434959,-268434515,-268435371,-268435203,-268434729,-268435002,-268435414,-268434803,-268434474,-268434838], [-268435449,-268434534,-268435051,-268434517,-268434544,-268434879,-268434597,-268435326,-268434748,-268434560,-268435192,-268434478,-268434810,-268435153,-268435061,-268434470,-268434733,-268435363,-268434580,-268435329,-268435227,-268434868,-268434475,-268434829,-268434804,-268434917,-268435134,-268434478,-268434525,-268434567,-268435434,-268435203,-268434804,-268434979,-268435141,-268434879,-268435046,-268435389,-268434928,-268435313,-268434892,-268434623,-268435100,-268434522,-268435178,-268435169,-268434670,-268435040,-268435267,-268434857,-268434667,-268434463,-268434960,-268434903,-268434588,-268435431,-268434466,-268435154,-268434990,-268434544,-268435262,-268435067,-268435158,-268434596,-268434641,-268434466,-268434773,-268435050,-268435293,-268435148,-268434614,-268434504,-268434797,-268435128,-268435336,-268434660,-268435163,-268435405,-268434462,-268434785,-268435383,-268435244,-268435406,-268434939,-268435416,-268435177,-268434580,-268434931,-268434803,-268435114,-268435072,-268434850,-268434500,-268434632,-268435073,-268435366,-268435250,-268435094,-268434460,-268434947], [268434570,268435299,268434594,268435215,268435163,268434582,268434957,268434905,268434934,268435013,268434659,268435339,268434868,268435282,268435372,268434735,268435201,268434846,268435158,268434479,268434970,268435345,268434991,268434939,268435018,268435409,268434748,268434985,268435016,268434607,268435104,268434693,268435007,268434724,268435410,268434519,268435127,268434513,268435287,268435182,268434786,268435198,268434932,268434973,268434975,268434490,268434879,268434792,268435321,268435421,268434546,268434805,268434979,268434857,268434710,268434704,268435310,268434584,268434688,268434570,268434529,268434935,268435392,268434816,268435018,268435020,268435353,268435447,268434891,268435017,268435350,268435063,268434588,268434799,268434502,268434850,268434596,268434614,268435268,268435023,268435104,268434794,268434895,268434964,268435271,268435130,268434866,268434596,268434721,268434912,268434848,268435244,268435077,268434848,268435322,268434767,268434651,268435129,268435386,268435275], [268434703,268435305,268434939,268434879,268434698,268435394,268434889,268435213,268435372,268435152,268434962,268434967,268434772,268435121,268434751,268434884,268435060,268435048,268435221,268434797,268434489,268435270,268434499,268434767,268434750,268435025,268434910,268434684,268434486,268434969,268435423,268434999,268435162,268434565,268434852,268435387,268435322,268434503,268435044,268434761,268435151,268435261,268434728,268434686,268434781,268435110,268434743,268435339,268434663,268435305,268435301,268434666,268434469,268434893,268435192,268434568,268434676,268434569,268434963,268434889,268435373,268434510,268434820,268434824,268435285,268435092,268435304,268435201,268434841,268435241,268434497,268435107,268434531,268434556,268434643,268435163,268435226,268435453,268434704,268435013,268434831,268435386,268435058,268435346,268434914,268435404,268435274,268434686,268434757,268434953,268435337,268435108,268435309,268435093,268434780,268434836,268434755,268435191,268434663,268434533]))
    # def test05(self):
    # def test06(self):
    # def test07(self):
    # def test08(self):
    # def test09(self):
    # def test10(self):
    # def test11(self):
    # def test12(self):
