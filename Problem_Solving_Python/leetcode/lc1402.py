from itertools import accumulate; from math import floor,ceil,sqrt; import operator; import random; import string; from bisect import *; from collections import deque, defaultdict, Counter, OrderedDict; from functools import reduce, cache, cmp_to_key; from heapq import *; import unittest; from typing import List,Optional; from functools import cache; from operator import lt, gt
from binary_tree_tester import ser,des,TreeNode; from a_linked_list import make_linked_list
from Problem_Solving_Python.template.binary_tree import deserialize
def get_sol(): return Solution3()
class Solution2:
    # tle
    def maxSatisfaction(self, nums: List[int]) -> int:
        @cache
        def dp(i, time):
            if i==n: return 0
            res=float('-inf')
            for j in range(i,n):
                option1 = nums[i] * time + dp(i + 1, time + 1) # take it
                option2 = dp(i + 1, time) # skip it
                res=max(res,option1,option2)
            return res

        n=len(nums)
        nums.sort()
        return dp(0,1)
class Solution3:
    # https://www.youtube.com/watch?v=mB24wDI0Bp0
    def maxSatisfaction(self, satisfaction: List[int]) -> int:
        n=len(satisfaction)
        satisfaction.sort()
        total=0
        i=n-1
        while i>=0:
            total+=satisfaction[i]
            if total<0:
                break
            i-=1

        i+=1
        k=1
        res=0
        while i<n:
            res+=satisfaction[i]*k
            k+=1
            i+=1
        return res
class Solution:
    def maxSatisfaction(self, nums:List[int]):
        nums.sort()
        n=len(nums)
        res = 0
        for i,x in enumerate(nums): # cook all the dishes
            res+= x*(i+1)
        running_sum=sum(nums)
        for i in range(n): # start removing from the first dish. Dishes on the left are worse compared to dishes on the right.
            if running_sum<0: # If I do not include the ith item then I can get better res
                res-=running_sum
                running_sum-=nums[i] # subtracting nums[i] means I start from i+1 dish
        return res

class Tester(unittest.TestCase):
    def test1(self):
        self.assertEqual(14,get_sol().maxSatisfaction( [-1,-8,0,5,-9]))
    def test2(self):
        self.assertEqual(20,get_sol().maxSatisfaction([4,3,2]))
    def test3(self):
        self.assertEqual(0,get_sol().maxSatisfaction([-1,-4,-5]))
    def test4(self):
        self.assertEqual(35,get_sol().maxSatisfaction([-2,5,-1,0,3,-3]))
    def test5(self):
        self.assertEqual(6,get_sol().maxSatisfaction([2,-2,-3,1]))
    def test6(self):
        self.assertEqual(5640720,get_sol().maxSatisfaction([213,-425,-316,-88,89,-331,191,117,33,442,373,122,209,13,-380,382,-298,436,-255,-108,-45,220,-446,-234,-86,11,223,-232,155,491,267,-13,-438,262,27,184,180,-191,12,-56,334,-4,386,468,281,492,-68,-53,3,258,-421,392,-19,-450,252,-312,-197,-232,-305,397,205,384,-140,-136,444,135,252,333,35,251,189,357,-273,-125,215,411,9,196,-77,73,195,217,104,483,195,92,-128,-454,-42,-155,60,-292,353,441,262,-454,67,-285,271,393,408,128,295,-370,-63,-357,-199,418,482,-240,224,424,-159,-234,377,-162,-22,298,237,198,-105,156,-423,210,427,329,202,-261,-131,-272,92,58,151,-68,-460,-383,99,-362,-397,120,2,-254,384,465,137,-179,-85,309,315,452,470,-346,-189,-263,103,-478,134,258,-469,389,-458,-118,444,-482,59,-78,12,203,262,200,47,-154,246,170,-381,-177,-456,-256,-52,364,-227,-45,280,137,187,203,242,-389,136,-161,-132,420,-31,-138,378,347,31,-419,394,94,441,-3,330,373,93,-424,-336,-320,-117,-171,103,309,-25,-490,-38,356,468,209,306,426,403,-340,-348,-294,-389,488,20,-166,-89,-283,-438,-164,114,495,-357,-61,464,-272]))
    def test7(self):
        self.assertEqual(7107240,get_sol().maxSatisfaction([184,-135,103,406,-474,-59,-237,-303,-431,436,493,-430,-22,-218,466,-493,82,144,431,448,-71,338,58,-29,464,62,-6,115,-236,-230,416,345,-14,-254,-366,-438,-98,-410,-137,301,35,240,-122,156,-212,-101,141,-167,-327,-178,-369,-416,112,-123,-46,396,378,389,371,-309,-340,184,-463,481,345,84,110,-364,42,445,458,169,-212,462,360,491,-142,269,410,491,-23,145,18,15,-214,40,-438,384,-145,145,-146,121,54,-195,88,396,235,378,-134,393,468,377,316,72,-439,171,-274,460,438,229,200,-398,391,70,380,-46,306,-79,411,-59,-402,-200,127,207,388,-58,-427,-67,-283,413,141,-84,336,343,482,442,112,397,214,188,74,-293,-368,247,-328,259,-363,376,-423,336,-237,346,-375,215,-425,49,-368,366,-20,-370,189,409,382,337,-314,14,-151,376,-283,488,-31,413,206,-96,-19,-326,0,34,396,-451,-384,-208,443,159,-93,-484,-340,319,158,-149,-162,324,416,-195,226,-324,-198,-10,180,471,222,-413,90,-305,-222,-430,161,497,53,-202,477,479,-143,-387,-203,-319,179,-146,-233,147,287,-137,399,428,-248,-290,312,-73,-380,-385,169,495,321,36,287,44,310,452,-471,-46,-28,-311,-67,-71,-498,123,-411,326,-148,-450,-208,397,-33,411,139,-244,435,-353,-271,-127,234]))
    def test8(self):
        self.assertEqual(12485225,get_sol().maxSatisfaction([-227,-265,243,52,-35,-54,-307,444,32,-468,-322,482,492,-85,-180,-298,228,291,-72,-183,218,-32,140,-133,42,-68,-202,403,142,-244,67,10,467,-138,-56,-311,198,426,296,254,-72,452,98,-190,350,-78,-114,-66,30,476,195,-344,498,-362,20,323,-202,347,86,-392,389,-96,177,-480,397,-100,-248,363,116,21,227,248,-472,247,-250,-280,199,-28,-38,-102,-17,498,196,-441,-82,-414,-337,184,303,318,-248,149,-491,148,153,495,380,-335,-207,37,-255,-213,-299,-153,-336,100,-158,-272,-414,217,-169,-461,390,-254,-81,-479,202,97,451,187,-228,202,331,-138,-66,29,217,-189,155,-102,498,-138,486,-408,-121,-362,404,-190,-258,121,-411,440,157,-63,498,-488,-20,-60,131,3,332,449,399,278,-76,-241,310,-253,-474,-442,-429,271,288,354,70,-69,-380,-111,123,-219,-195,152,75,200,415,-405,462,337,46,-88,171,311,-486,-269,-387,103,283,-332,-88,-278,152,10,-347,171,-480,389,219,147,485,447,242,177,49,-316,235,169,-286,-120,-182,-361,-429,432,-495,240,106,170,-341,62,381,19,29,-117,431,390,-139,-43,178,-448,185,353,-177,39,293,-333,224,495,-105,75,351,188,77,-163,84,-367,64,-43,-322,468,-442,-275,472,-208,361,-423,-126,-356,5,-11,3,-364,-21,-167,-237,-393,-87,185,246,-39,309,-190,-396,-110,-120,-450,89,-57,-243,87,142,24,82,250,-111,74,416,-417,-407,29,448,388,-27,-457,22,-393,324,-105,41,315,-380,-15,-235,92,120,69,-278,454,79,-288,394,-16,-391,215,367,34,264,-281,97,222,-406,448,-458,15,229,-254,-74,-41,461,85,-87,301,-370,-265,60,-341,-419,-253,237,-410,471,-110,463,-284,358,-89,495,-89,324,-422,42,480,-300,-132,-356,-361,367,-129,290,194,386,-9,-2,-276,-348,-68,-249,421,-268,270,-182,-483,152,-475,182,195,307,-137,484,-247,-109,113,-74,316,-476,116,-397,-371,96,-497,-326,-415,218]))
