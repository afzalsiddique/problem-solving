import itertools; import math; import operator; import random; from bisect import *; from collections import deque, defaultdict, Counter, OrderedDict; from functools import reduce; from heapq import *; import unittest; from typing import List;
def get_sol(): return Solution()
class Solution:
    # dp[i][j] represents the length of longest sequence which ends with A[i] and A[j].
    # https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/discuss/165330/Java-beat-98-DP-+-2Sum/637684
    def lenLongestFibSubseq(self, A: List[int]) -> int:
        n = len(A)
        dp = [[2] * n for _ in range(n)]
        ans = 0
        for i in range(2, n):
            l, r = 0, i - 1
            while l < r:
                if A[l] + A[r] > A[i]:
                    r -= 1
                elif A[l] + A[r] < A[i]:
                    l += 1
                else:
                    dp[r][i] = dp[l][r] + 1
                    ans = max(ans, dp[r][i])
                    r -= 1
                    l += 1
        # for x in dp: print(x)
        return ans
class Solution2:
    # works without dp but gets tle with dp
    def lenLongestFibSubseq(self, arr: List[int]) -> int:
        n=len(arr)
        dp={}
        def helper(second_last,last,path):
            # if (second_last,last) in dp: return dp[second_last,last]
            tmp=last+second_last
            idx=bisect_left(arr,tmp)
            if idx!=len(arr) and arr[idx]==tmp:
                ans= 1+helper(last,tmp,path+[arr[idx]])
            else:
                ans= 2
            # dp[second_last,last]=ans
            return ans

        maxx=0
        for i in range(n):
            for j in range(i+1,n):
                maxx=max(maxx,helper(arr[i],arr[j],[arr[i],arr[j]]))
        return maxx if maxx!=2 else 0




class MyTestCase(unittest.TestCase):
    def test_01(self):
        arr = [1,2,3,4,5,6,7,8]
        Output= 5
        self.assertEqual(Output,get_sol().lenLongestFibSubseq(arr))
    def test_02(self):
        arr = [1,3,7,11,12,14,18]
        Output= 3
        self.assertEqual(Output,get_sol().lenLongestFibSubseq(arr))
    def test_03(self):
        arr = [1,3,5]
        Output= 0
        self.assertEqual(Output,get_sol().lenLongestFibSubseq(arr))
    def test_04(self):
        arr = [2,4,7,8,9,10,14,15,18,23,32,50]
        Output= 5
        self.assertEqual(Output,get_sol().lenLongestFibSubseq(arr))
    def test_05(self):
        arr = [497,1563,1956,2895,3603,5424,7140,7895,8741,9034,9040,11468,12316,13511,14348,20159,21786,22038,22303,23633,24022,24263,25153,26320,26575,26935,27812,29251,31370,33258,35177,36128,36561,38725,40797,42048,44376,44810,45143,45679,47570,48996,49839,49855,50639,52755,53026,54045,56509,57216,59867,63655,64103,66213,66220,66460,68404,68953,69502,69710,70005,72534,72644,74094,74862,76627,77348,80139,81565,81732,82133,86143,86624,87324,87610,88012,88044,88716,89430,93836,93938,94612,95252,95510,95846,96072,97103,97149,98558,99127,99203,100067,101160,101196,101467,101826,102152,102782,103712,105622,106125,108094,108415,109240,110048,110880,111004,111643,111947,112516,113503,113635,120096,120227,121533,123226,123307,123722,124805,124943,125299,125585,126560,126896,127315,127559,128325,129477,129618,130704,132479,133148,136162,136634,138531,139403,139436,139952,141099,141794,146177,150537,150987,153441,154034,154346,154830,154898,156202,156652,158157,158462,160250,161115,162642,164532,164692,165769,166071,166835,167975,171679,171825,172908,177994,178294,179499,179894,180083,183850,185190,186500,186875,187585,187941,189488,190558,192371,193784,195910,196566,197288,201900,203964,205436,206327,206535,206626,207167,208220,213180,215549,215716,216729,217717,217804,218263,219241,221492,221925,223047,224181,226343,228921,229329,231853,233635,233791,233795,234364,234727,235611,236300,237522,237587,238614,239730,240440,240492,240562,240780,244311,248251,250645,250947,251994,253736,258647,265860,270908,271032,272768,273950,274389,275091,277246,279718,279967,282179,282457,283163,283197,283946,284151,284205,284836,285748,286551,287704,289207,289624,290684,291214,291462,292031,293696,299714,300133,301571,304022,305012,305718,305861,308494,308610,309695,310438,310941,311643,312402,313116,313482,313978,313981,314057,314482,317132,319306,319518,323910,324442,325569,326630,327784,328379,329016,329091,330695,331730,331743,333514,334702,335022,335322,335467,335478,336514,337013,339464,340301,340334,342080,342538,346755,350043,350207,350489,350712,351826,352197,352340,352665,356244,360345,360941,361026,361465,361653,363036,364798,365599,366219,370900,370951,373592,375094,376336,376766,378479,382135,382201,383117,384139,385062,385480,385783,385969,386132,387046,387099,387383,387442,390238,391346,393529,395357,397534,397591,397690,398558,399200,400318,401258,402499,402921,403509,404274,409291,409479,410627,412498,412509,412909,414746,414829,416210,418824,418866,419975,420800,421232,421749,422796,422885,423000,423268,425778,426427,426727,427657,428873,430640,430887,430899,431015,431521,432209,432555,433088,433340,433524,436341,436488,436882,436921,437190,439812,441669,446843,447331,447708,449597,450932,453650,457001,457904,459176,459455,463736,465385,466053,466918,467180,467665,469515,471002,471966,472596,473331,474364,475588,476686,477281,481073,481586,486691,487677,487722,488461,488532,488762,489031,490079,490524,490880,492244,497628,499281,499625,500522,500727,501420,501656,502373,503015,505888,509209,511533,513513,514204,518085,521177,521302,525355,526181,526345,530858,531096,535257,538198,540440,544107,544869,545424,546013,548478,551027,551141,551894,552060,553001,553768,553871,554173,556210,559264,559910,560205,560967,561214,561529,563068,566065,567443,569027,569049,569050,569594,572122,576774,577056,578587,578880,578992,579736,579990,582216,583274,583733,584996,585309,585368,586221,586426,587971,589683,590929,592724,594278,595175,595435,599840,601226,602748,604251,604773,604796,605740,607890,609520,612423,613879,616779,616977,617049,617427,617522,619357,619713,619844,620479,621954,621966,622012,623548,623656,625601,625618,626541,627257,628577,630052,630265,630527,633159,633429,633457,638155,638936,639287,641677,642051,642650,642882,648003,649283,649308,650430,650913,653418,654240,654645,655593,656228,658240,659523,659527,659865,664702,669693,672915,673441,673522,674187,674412,678043,678169,679719,680527,682694,686019,687344,687982,688211,688971,689116,689444,690038,691142,691626,691755,692651,692915,694530,695078,695528,695600,696839,698595,698814,699073,700210,701073,701871,702179,702193,702959,704385,706982,708463,709693,712475,714129,715414,716736,717388,718961,722906,724422,725816,727920,728469,729567,731798,732644,732917,735249,735598,737140,738142,740044,740241,741319,742689,743173,743986,745148,746760,746833,747281,747524,747871,748697,749037,749551,752340,754138,755478,757358,757826,759494,760248,760301,761082,763264,764390,765124,765178,765521,766921,767147,768977,770163,770623,771144,775118,779298,780556,781866,783332,783624,786556,786954,788985,789856,792370,793637,793810,795083,795897,796608,797752,798174,799115,800742,804870,806390,807802,808092,809130,811184,815359,815571,815776,817021,819131,820441,821268,823841,825976,826738,827007,829129,829286,831346,832241,832824,834217,835205,836972,837960,837965,838295,838761,843914,843919,844333,844667,845344,845668,848898,849359,849536,850303,850329,850508,851558,853262,857006,858176,858512,860053,860743,860966,861679,862099,862432,865063,867161,867425,868160,868647,869648,869666,871560,873767,875402,878854,879751,882955,883166,887404,888320,889390,890128,891024,891960,893710,895165,896363,897173,897470,898752,899956,903788,905084,908197,908420,909588,910035,911350,911959,912266,912508,914650,919448,921961,923801,923843,923902,924170,924616,926248,928344,928379,928461,928747,929115,929448,930387,930650,930714,931054,931417,932000,932444,932898,935426,935490,937563,939951,943007,943857,945021,945326,945609,946714,946789,946900,948637,949350,952736,954690,957235,957316,959392,960183,962117,962159,962427,963063,964681,964749,965050,965975,966066,966165,966442,973511,974609,975419,977332,977951,978611,979533,979585,981192,981302,982120,982992,983718,986460,987123,987468,988191,988714,992845,993795,994243,997453]
        Output= 3
        self.assertEqual(Output,get_sol().lenLongestFibSubseq(arr))
    # def test_06(self):
    # def test_07(self):