import itertools; import math; import operator; import random; from bisect import *; from collections import deque, defaultdict, Counter, OrderedDict; from heapq import *; import unittest; from typing import List;
def get_sol(): return Solution()
class Solution:
    # https://leetcode.com/problems/filling-bookcase-shelves/discuss/374938/DFS.-Explanation.-Try-adding-a-book-to-the-current-shelf-and-next-one
    def minHeightShelves(self, books: List[List[int]], shelf_width: int) -> int:
        n=len(books)
        dp = {}
        def h(i, left, shelf_cur_hei):
            if left<0: return float('inf')
            if (i, left, shelf_cur_hei) in dp: return dp[i, left, shelf_cur_hei]
            if i==n: return shelf_cur_hei

            book_wid,book_hei=books[i]
            add_to_cur_shelf=                  h(i + 1, left - book_wid,      max(shelf_cur_hei, book_hei))
            add_to_next_shelf= shelf_cur_hei + h(i + 1, shelf_width-book_wid, book_hei)

            ans = min(add_to_cur_shelf,add_to_next_shelf)
            dp[i, left, shelf_cur_hei] = ans
            return ans

        return h(0,shelf_width,0)
class Solution2:
    # tle
    def minHeightShelves(self, books: List[List[int]], width: int) -> int:
        n=len(books)
        def h(i, total_hei,max_hei, width_left):
            if i==n: return total_hei + max_hei
            ans1=float('inf')
            if books[i][0]<=width_left: # put it in the same row
                tmp=max(max_hei,books[i][1])
                ans1=h(i+1,total_hei,tmp,width_left-books[i][0])

            ans2 = h(i+1,total_hei+max_hei,books[i][1],width-books[i][0]) # put it in the next row
            return min(ans1,ans2)

        return h(0,0,0,width)



class tester(unittest.TestCase):
    def test_0(self):
        books,shelf_width = [[1,1],[2,3],[2,3]], 4
        Output= 4
        self.assertEqual(Output, get_sol().minHeightShelves(books,shelf_width))
    def test_1(self):
        books,shelf_width = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], 4
        Output= 6
        self.assertEqual(Output, get_sol().minHeightShelves(books,shelf_width))
    def test_2(self):
        books,shelf_width = [[11,83],[170,4],[93,80],[155,163],[134,118],[75,14],[122,192],[123,154],[187,29],[160,64],[170,152],[113,179],[60,102],[28,187],[59,95],[187,97],[49,193],[67,126],[75,45],[130,160],[4,102],[116,171],[43,170],[96,188],[54,15],[167,183],[58,158],[59,55],[148,183],[89,95],[90,113],[51,49],[91,28],[172,103],[173,3],[131,78],[11,199],[77,200],[58,65],[77,30],[157,58],[18,194],[101,148],[22,197],[76,181],[21,176],[50,45],[80,174],[116,198],[138,9],[58,125],[163,102],[133,175],[21,39],[141,156],[34,185],[14,113],[11,34],[35,184],[16,132],[78,147],[85,170],[32,149],[46,94],[196,3],[155,90],[9,114],[117,119],[17,157],[94,178],[53,55],[103,142],[70,121],[9,141],[16,170],[92,137],[157,30],[94,82],[144,149],[128,160],[8,147],[153,198],[12,22],[140,68],[64,172],[86,63],[66,158],[23,15],[120,99],[27,165],[79,174],[46,19],[60,98],[160,172],[128,184],[63,172],[135,54],[40,4],[102,171],[29,125],[81,9],[111,197],[16,90],[22,150],[168,126],[187,61],[47,190],[54,110],[106,102],[55,47],[117,134],[33,107],[2,10],[18,62],[109,188],[113,37],[59,159],[120,175],[17,147],[112,195],[177,53],[148,173],[29,105],[196,32],[123,51],[29,19],[161,178],[148,2],[70,124],[126,9],[105,87],[41,121],[147,10],[78,167],[91,197],[22,98],[73,33],[148,194],[166,64],[33,138],[139,158],[160,19],[140,27],[103,109],[88,16],[99,181],[2,140],[50,188],[200,77],[73,84],[159,130],[115,199],[152,79],[1,172],[124,136],[117,138],[158,86],[193,150],[56,57],[150,133],[52,186],[21,145],[127,97],[108,110],[174,44],[199,169],[139,200],[66,48],[52,190],[27,86],[142,191],[191,79],[126,114],[125,100],[176,95],[104,79],[146,189],[144,78],[52,106],[74,74],[163,128],[34,181],[20,178],[15,107],[105,8],[66,142],[39,126],[95,59],[164,69],[138,18],[110,145],[128,200],[149,150],[149,93],[145,140],[90,170],[81,127],[57,151],[167,127],[95,89]], 200
        Output= 15672
        self.assertEqual(Output, get_sol().minHeightShelves(books,shelf_width))
    def test_3(self):
        books,shelf_width = [[72,114],[33,54],[139,22],[128,18],[189,3],[82,184],[154,43],[183,30],[46,34],[10,180],[52,12],[113,176],[32,108],[170,23],[7,33],[86,126],[154,110],[111,173],[177,58],[17,118],[70,77],[175,60],[183,7],[173,115],[152,112],[29,57],[121,3],[159,178],[180,74],[116,7],[61,52],[176,87],[169,123],[88,38],[179,168],[5,159],[195,191],[147,160],[57,53],[50,14],[20,169],[122,132],[44,194],[155,153],[189,20],[160,200],[56,23],[13,111],[139,99],[122,193],[26,180],[63,24],[91,104],[5,82],[200,63],[12,150],[73,148],[180,181],[19,103],[8,123],[122,94],[34,12],[29,91],[198,93],[1,101],[147,157],[89,20],[172,35],[3,119],[66,134],[22,75],[93,79],[118,131],[173,124],[175,16],[127,163],[174,151],[10,33],[74,189],[54,79],[189,165],[110,165],[45,53],[19,135],[114,144],[148,188],[81,163],[189,176],[121,156],[198,120],[151,65],[111,128],[71,80],[73,60],[145,93],[197,89],[114,94],[31,121],[87,168],[136,49],[56,30],[168,103],[27,28],[63,154],[159,71],[106,190],[171,77],[70,70],[81,42],[200,85],[88,148],[133,92],[15,41],[174,77],[200,13],[78,37],[116,32],[8,124],[74,25],[12,158],[87,81],[104,192],[121,194],[59,133],[174,59],[33,95],[131,39],[129,86],[125,74],[80,26],[107,190],[63,58],[102,15],[84,73],[141,33],[120,39],[52,196],[71,152],[173,21],[190,184],[154,169],[172,69],[37,92],[92,109],[185,80],[21,168],[144,38],[84,188],[123,146],[85,1],[91,188],[130,173],[103,127],[35,56],[104,147],[101,160],[102,97],[48,139],[152,74],[132,181],[4,92],[77,36],[124,131],[88,37],[184,30],[137,80],[129,76],[174,116],[88,76],[127,179],[55,133],[141,45],[128,141],[36,141],[196,125],[168,163],[13,19],[175,94],[50,199],[93,111],[103,75],[107,180],[129,62],[11,189],[164,92],[15,84],[74,88],[86,184],[53,2],[81,74],[199,127],[172,119],[73,14],[86,34],[73,106],[74,67],[171,186],[186,60],[158,186],[94,132],[26,54],[124,120],[8,3],[104,173],[120,36],[60,129],[63,84],[19,97],[178,178],[1,5],[15,121],[74,42],[160,7],[85,128],[62,104],[188,142],[4,98],[197,98],[171,105],[43,112],[199,131],[46,140],[130,192],[196,56],[133,9],[194,85],[167,129],[197,180],[36,149],[31,11],[152,65],[106,37],[10,113],[127,147],[138,155],[176,85],[178,195],[119,30],[162,5],[79,80],[92,167],[130,91],[35,66],[137,195],[99,182],[99,167],[107,199],[80,131],[122,137],[157,100],[87,98],[196,116],[85,25],[161,148],[4,186],[164,194],[96,53],[66,16],[194,23],[125,117]], 200
        Output= 20378
        self.assertEqual(Output, get_sol().minHeightShelves(books,shelf_width))
    # def test_4(self):
    # def test_5(self):
    # def test_6(self):
    # def test_7(self):
    # def test_8(self):
