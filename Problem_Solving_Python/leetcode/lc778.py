from itertools import accumulate; from math import floor,ceil,sqrt; import operator; import random; import string; from bisect import *; from collections import deque, defaultdict, Counter, OrderedDict; from functools import reduce, cache, cmp_to_key; from heapq import *; import unittest; from typing import List,Optional; from functools import cache; from operator import lt, gt
from binary_tree_tester import ser,des,TreeNode; from a_linked_list import make_linked_list
from Problem_Solving_Python.template.binary_tree import deserialize
def get_sol(): return Solution()
class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        def within(x,y): return 0<=x<n and 0<=y<n
        def get_moves(x,y): return [(x+dx,y+dy) for dx,dy in [(1,0),(-1,0),(0,1),(0,-1)] if within(x+dx,y+dy)]
        VISITED=3000
        n=len(grid)
        pq = [[grid[0][0],0,0]] # val,i,j
        while pq:
            val,x,y = heappop(pq)
            if grid[x][y]==VISITED: continue
            if x==n-1 and y==n-1:
                return val
            for i,j in get_moves(x,y):
                heappush(pq,[max(val,grid[i][j]),i,j])
            grid[x][y]=VISITED
class Solution3:
    def swimInWater(self, grid: List[List[int]]) -> int:
        n=len(grid)
        vis=set()
        heap = [(grid[0][0],0,0)] # (time,i,j)
        t=0
        while heap:
            while heap and heap[0][0]==t:
                maxx,i,j=heappop(heap)
                if (i,j) in vis: continue
                vis.add((i,j))
                if i==n-1 and j==n-1:
                    return max(maxx,grid[i][j])
                for di,dj in [(1,0),(-1,0),(0,1),(0,-1)]:
                    new_i,new_j=i+di,j+dj
                    if not 0<=new_i<n or not 0<=new_j<n: continue
                    tmp=max(maxx,grid[new_i][new_j])
                    heappush(heap,(tmp,new_i,new_j))
            t+=1
class Solution2:
    # optimized
    def swimInWater(self, grid: List[List[int]]) -> int:
        n=len(grid)
        vis=set()
        vis.add((0,0))
        heap = [(grid[0][0],0,0)] # (time,i,j)
        t=0
        while heap:
            while heap and heap[0][0]==t:
                maxx,i,j=heappop(heap)
                if i==n-1 and j==n-1:
                    return max(maxx,grid[i][j])
                for di,dj in [(1,0),(-1,0),(0,1),(0,-1)]:
                    new_i,new_j=i+di,j+dj
                    if not 0<=new_i<n or not 0<=new_j<n: continue
                    if (new_i,new_j) in vis: continue
                    vis.add((new_i,new_j))
                    tmp=max(maxx,grid[new_i][new_j])
                    heappush(heap,(tmp,new_i,new_j))
            t+=1
class Solution4:
    # tle
    def swimInWater(self, grid: List[List[int]]) -> int:
        VISITED=3000
        def within(x,y): return 0<=x<n and 0<=y<n
        def get_moves(x,y): return [(x+dx,y+dy) for dx,dy in [(1,0),(-1,0),(0,1),(0,-1)] if within(x+dx,y+dy)]
        @cache
        def dfs(x,y,val):
            nonlocal res
            if x==n-1 and y==n-1:
                res=min(res,max(val,grid[x][y]))
                return
            if grid[x][y]==VISITED: return
            save_val = grid[x][y]
            grid[x][y]=VISITED
            for X,Y in get_moves(x,y):
                dfs(X,Y, max(val,save_val))
            grid[x][y]=save_val

        n=len(grid)
        res=float('inf')
        dfs(0,0,float('-inf'))
        return res

class tester(unittest.TestCase):
    def test1(self):
        self.assertEqual(3,get_sol().swimInWater(grid = [[0,2],[1,3]]))
    def test2(self):
        self.assertEqual(16,get_sol().swimInWater(grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]))
    def test3(self):
        self.assertEqual(35,get_sol().swimInWater(grid = [[35,19,17,25,4,10],[8,18,29,21,28,31],[15,5,33,2,13,3],[26,20,27,23,11,1],[6,14,24,7,12,16],[30,34,32,22,0,9]]))
    def test4(self):
        self.assertEqual(2041,get_sol().swimInWater(grid = [[652,2041,1010,1052,2125,667,128,1025,983,1815,1380,1311,2297,1715,1148,2315,351,1196,29,285,1990,250,655,456,149,1285,236,582,514,2032,773,1638,826,563,613,2259,142,679,2053,2192,1643,851,2448,401,963,1467,1185,616,1497,1851],[2161,1351,1846,1008,855,1079,932,2381,1835,451,2035,1637,2283,1705,1889,548,1216,1406,1103,2401,538,346,1809,376,170,1508,1560,2197,2290,639,1609,1344,1031,2222,2130,173,2081,2047,783,1608,2414,1861,2124,791,1012,1640,410,1760,1944,121],[752,464,1562,1076,1602,2450,1662,1695,576,164,506,825,372,1000,1898,2241,1972,1896,2438,2492,2004,1840,1928,1410,1630,663,287,262,430,1226,1173,1952,2429,937,690,275,899,632,878,405,889,113,388,2107,13,891,15,653,1576,193],[1681,2013,897,143,1584,1780,1991,2265,1909,2024,832,1477,465,1125,1864,317,1448,1121,1829,2079,2261,1577,409,43,338,2046,1332,1923,584,658,1466,715,1041,2282,2343,2069,445,977,1238,1549,712,145,1205,425,2445,283,1194,206,1211,1480],[213,1558,2,1281,1425,1074,294,1039,2090,724,1999,650,1473,1603,129,168,1158,657,914,36,524,926,1392,568,1244,843,2341,1316,1874,807,1689,2387,550,1776,1779,2227,1162,2190,1612,34,1974,1813,999,1383,1495,671,1995,178,2147,1834],[2109,895,2301,1922,1054,1661,1970,169,863,39,1598,842,726,2451,1133,1215,1236,116,466,1987,205,371,1596,904,633,1210,1976,2085,1375,735,1897,1535,357,2256,302,515,1854,1384,1138,1140,2238,2029,1257,2328,2219,738,959,472,1159,435],[839,2042,1814,874,355,1169,111,1868,2435,482,108,698,546,1688,2439,1759,1155,1755,2003,1129,1575,2038,509,2368,1624,1941,137,1498,72,216,2464,1706,60,2353,771,1363,0,1468,1278,2006,172,1161,158,1739,188,549,2270,1786,950,1595],[1174,644,869,941,1545,2018,115,1674,1369,1297,292,749,1149,1414,377,1912,2419,1442,1144,1199,1268,1552,441,2415,1663,2360,5,75,226,1994,1292,490,704,2202,1563,1583,1081,2163,711,886,315,387,1789,1836,258,912,483,1707,162,2193],[461,1127,1325,2071,271,2423,365,943,532,1015,117,2059,670,877,868,1930,1870,2346,1510,1718,934,2285,2092,1504,1853,641,929,1600,1546,2141,898,1304,14,709,976,2011,1128,517,308,1290,1933,890,1934,1992,2383,1696,416,1444,880,1261],[984,2390,1386,504,2064,1625,403,2398,765,1458,2442,1501,454,459,1537,2225,1291,1918,1412,1634,566,1094,554,722,2048,1142,813,1524,2000,1812,95,896,918,1550,51,1004,247,2436,923,1722,2488,2176,1570,190,2258,2086,945,468,2204,1105],[789,1475,780,1723,802,1367,2293,1123,2062,2329,2236,1636,2300,1117,1220,1925,2262,59,993,1810,859,772,962,2044,2382,572,1690,2009,561,693,385,2087,237,2424,1432,1029,1175,1749,1505,1633,1282,449,1208,1802,894,565,1597,2039,1631,184],[2310,1832,539,2203,54,1822,1252,480,2057,1623,1604,2156,323,659,433,1439,2316,1019,1881,1591,935,2490,1632,12,2269,228,1873,1193,17,2123,786,2494,2273,230,257,1153,1773,1028,1852,1526,1366,1605,614,2272,2138,2457,1017,2207,215,710],[1481,471,992,541,862,884,1592,1801,1106,1704,1587,333,1218,1083,2371,718,240,1233,703,1515,2497,1385,478,559,1090,1582,1197,1047,44,2132,1959,686,265,814,1916,806,2148,646,2140,1428,69,270,2233,56,705,1830,1313,852,505,1528],[1393,1306,359,2496,165,1003,2286,2364,1408,20,743,1512,496,1837,78,998,112,277,1411,2373,1894,553,1269,422,846,2422,746,457,2313,838,118,1454,1985,1686,2292,1176,589,1567,696,1474,1180,1459,672,2392,2402,1658,1275,2420,2244,126],[1402,166,776,2002,1559,1772,2217,2022,1362,609,2493,2471,1554,719,1503,185,1124,183,7,685,1626,1006,1423,1965,1816,2421,22,2215,320,1349,2466,822,1714,1232,612,413,18,643,1580,1484,19,2055,721,1096,1733,1708,90,175,1790,1997],[1417,1059,1879,2367,1237,1330,364,89,298,2385,2037,2463,2404,1915,543,1551,1296,2060,269,274,757,665,1478,1659,598,1648,2433,350,1461,570,525,1091,2359,2021,1005,1645,1204,716,607,23,1069,680,1241,627,1164,500,1151,988,1319,907],[1725,782,477,1743,1993,251,2384,1235,748,1073,2102,1553,1255,266,2247,1112,2409,2456,1310,2271,2139,481,474,1871,1982,1487,1748,1082,358,1747,1299,2425,1803,2274,1303,1701,527,1676,182,2449,1954,1132,2121,2388,1716,1781,154,53,1188,1058],[1867,2131,1371,1377,2082,124,1720,2146,253,1231,1649,1968,2198,1787,856,2242,1880,2252,1183,1808,1167,2101,1669,2347,871,1945,2254,1267,1035,1566,389,594,91,1341,1673,1514,513,2459,676,1165,144,362,695,2031,552,1593,623,1262,2186,762],[526,1828,2455,2119,195,883,304,1345,529,2411,199,2417,587,2354,382,2418,264,1518,1326,761,2050,2007,1920,245,1806,558,1018,900,2028,956,1198,181,1302,913,2394,300,2288,1046,648,820,420,1684,625,2372,583,1447,1839,2495,2074,991],[2481,2370,339,1427,1250,452,1799,601,241,218,725,989,723,1877,1260,1788,1606,1800,881,1390,1719,222,1568,31,1209,580,1191,45,1858,1273,796,1359,1670,1905,378,1893,46,1246,979,1908,516,1251,1798,787,1887,11,470,2187,1731,1940],[2461,742,606,282,1581,917,244,2379,458,1077,1685,2489,821,1130,231,1141,1811,1339,1573,1462,1521,1655,1068,1450,2026,1619,1346,2218,1490,1948,978,2440,668,1774,58,1492,1118,1664,2327,411,1756,2133,9,927,1400,1967,800,808,595,1294],[986,2229,1195,2226,581,2230,593,2162,439,1556,1456,1571,1884,2255,122,412,360,418,1259,343,1348,2078,2128,691,303,1338,2289,1962,599,854,1726,379,2486,427,1635,1404,301,687,1009,1050,1134,2407,485,1202,2393,2174,207,2149,2250,1437],[1950,619,948,1978,2413,2458,759,1644,1885,2358,2208,1513,990,1712,1095,1523,1340,467,1223,1642,2122,801,1401,1413,1919,2462,2332,2447,1067,866,2304,879,1692,1728,677,100,2295,793,537,1131,1734,1263,1793,972,329,799,1342,915,1460,2108],[331,1471,694,139,155,2049,1247,864,1002,758,1906,1831,2223,2231,2020,197,1152,531,2127,1289,1479,1352,1071,2279,1166,1671,508,1113,1627,1650,830,2239,1206,1866,2075,2325,2375,2221,428,1741,2019,2251,1457,887,1399,1775,1702,1738,701,2320],[2179,353,702,1396,2416,2484,147,1883,971,1368,1727,312,1588,395,2305,1154,2105,928,392,974,853,982,299,369,1666,755,2454,750,1288,2056,1765,238,1917,2395,1665,1329,24,1960,1641,1350,1337,645,313,341,1744,1936,1264,955,1937,2118],[2070,688,2333,1051,1443,1110,2083,1119,870,1863,102,1754,651,885,865,925,841,1361,1942,2235,1758,16,911,673,191,229,1277,1961,131,424,1395,1063,1761,1710,1859,84,849,756,1651,1324,1947,634,209,163,2377,21,2120,523,153,2076],[1519,1098,460,1683,1243,1027,2476,2005,731,1407,494,528,573,1087,1135,753,174,1007,902,2363,32,324,1157,872,475,1065,1184,1365,1357,334,2352,1653,2016,605,2134,2280,141,2245,1314,2017,2389,2058,751,2336,1062,407,794,469,49,1888],[1139,2164,2068,805,1494,567,1020,322,1791,1913,2483,1055,1343,386,436,2340,1240,2326,777,503,882,1318,1848,94,1882,729,272,2470,2030,1080,1440,2308,1358,1616,1946,290,1730,1958,4,1820,2206,1409,2160,176,426,995,774,63,1872,2309],[2296,2437,1639,1986,2177,1248,321,2199,1086,6,547,1276,621,2178,1057,221,1703,2209,1293,764,1308,1421,996,2051,2479,1539,2196,1543,1272,52,2410,1522,2072,1729,631,1372,1732,1614,2183,336,1529,1844,123,2067,1172,1821,1900,908,2263,1980],[1177,327,2211,1516,1740,1860,600,2378,511,391,1449,1827,1957,326,577,1207,2474,1397,1465,2232,1186,2287,352,2312,235,1033,419,785,97,2482,366,1353,1066,2088,1469,610,1472,319,2452,68,1287,818,77,620,160,1939,924,562,700,374],[1534,1201,893,1507,493,1601,2248,987,596,1677,1334,730,1682,71,1168,2142,227,159,848,961,66,2094,67,307,1034,622,1426,2444,2171,518,130,1618,933,1675,2339,1819,1435,1347,1213,1038,404,2443,571,2144,2386,958,2100,1907,1452,967],[214,136,400,858,1,255,1485,1667,845,223,161,1266,875,2430,1499,861,828,2348,1724,1145,2426,1796,348,104,1841,484,636,2499,823,938,1219,268,256,73,2478,2480,2431,1969,1620,1271,2080,210,1104,2376,1694,2129,1951,1200,2234,2012],[30,109,1574,2061,669,502,394,969,293,1274,1391,1711,233,597,1843,2168,1589,1926,2182,2284,1470,2281,2073,1561,578,79,381,1943,2111,1795,2191,1418,947,1971,1328,217,373,2491,396,922,408,909,692,1594,2173,1687,148,2253,345,1323],[1049,328,2299,910,788,867,1735,1745,1977,438,1179,1932,1483,1963,2349,1621,1823,8,1107,741,1101,804,1768,575,295,202,203,1093,1579,2095,951,101,1307,76,501,64,2025,186,637,103,1354,1108,1382,1476,763,520,399,1493,443,1228],[1256,1300,545,1419,779,2342,1855,177,1797,1869,1548,1360,278,1509,1607,920,551,2473,1979,615,1825,1610,1856,2369,2266,1064,2432,82,2298,626,499,1381,498,267,1680,384,417,1622,2355,1927,1764,901,1817,2104,2195,942,1178,536,642,1613],[367,380,1849,2323,940,1463,1312,363,296,74,936,1910,585,107,1488,1023,2126,574,1657,1931,1709,135,1335,1891,61,1092,2014,1875,1270,361,344,476,432,965,1016,1373,1911,402,1181,114,1784,519,617,980,1678,1217,198,2427,1242,2321],[586,2240,592,2380,2366,699,1752,276,2331,1043,1045,261,2345,1783,2264,713,921,2172,2001,179,1699,140,437,1672,473,1317,949,535,2184,1182,491,1482,1234,42,325,1547,1356,770,1253,1914,674,1376,1737,939,2089,857,48,618,1697,40],[540,649,2311,1525,1061,1500,2322,1013,2165,1192,2027,2097,906,1014,2267,1301,604,1100,1818,1115,892,635,2066,309,462,440,450,1713,683,1988,87,1441,2260,1084,2008,2040,810,970,1892,2216,248,2249,1721,2135,2469,521,784,1451,204,1146],[1203,291,2155,2093,1766,591,1032,1929,180,960,732,2084,447,2106,968,28,1224,2467,1955,342,25,905,1502,260,486,654,263,953,836,38,1617,92,1496,2175,2214,778,495,744,1327,1239,707,1102,740,1679,678,1753,2335,681,660,697],[588,1422,354,1895,10,1750,2307,463,157,225,981,335,1212,569,1865,608,2276,2113,93,1975,975,2152,530,444,152,2344,2166,1364,2324,70,1983,533,1309,1431,2201,1446,62,1533,1656,1693,187,316,1122,488,2205,1379,1387,714,557,564],[1569,297,2472,252,542,356,33,797,1762,2112,2103,769,2278,2330,1902,2498,249,1030,1389,2054,2169,888,171,1429,1660,1403,1053,1085,1378,2468,728,790,2453,2405,640,944,414,1769,997,1464,2052,1430,1147,151,489,119,310,2277,507,2465],[1742,370,590,2010,1565,2275,1416,556,2143,1538,2116,1557,1586,840,2362,2034,1284,196,555,132,133,2356,1691,2159,455,2158,1953,479,873,98,876,1037,2403,1654,2477,1305,35,146,446,952,829,167,340,1056,80,2188,1315,2257,393,1717],[1981,1137,1001,127,1585,844,232,2151,397,973,429,816,390,2337,1160,1564,2220,1388,1530,349,1771,781,1899,110,1826,1989,280,1824,661,1116,375,1355,803,2294,760,2157,1850,254,954,50,243,2446,2077,1331,1230,2189,1531,831,2396,1847],[2043,809,2338,2117,2098,675,1394,689,827,1984,666,1163,2036,2213,1021,706,1629,2228,1532,2150,1370,431,1280,273,624,647,754,1136,2306,2033,2397,739,1170,534,2441,134,1807,2361,65,2302,1921,1097,1114,1438,1445,1424,330,2428,106,2374],[2399,286,2485,1541,2314,220,1520,1757,212,1805,1322,3,1320,211,2224,1258,1434,85,2015,708,2212,1022,1698,156,2145,1578,1901,1903,434,579,811,1878,1024,2136,522,1890,2460,1590,2303,194,88,766,2243,2318,246,512,81,1374,603,684],[1060,1420,1949,1171,1415,2023,96,2210,1767,1405,736,2268,1453,1187,497,239,189,305,423,2246,279,1336,817,2291,1120,1956,1599,288,1833,1075,1150,1089,2170,745,105,2065,1647,1026,1436,1143,767,1996,1286,1527,1938,150,662,1838,1777,83],[919,985,1973,1555,1221,835,1517,1070,337,442,47,1156,2412,957,1298,208,2167,1886,812,99,2185,1088,1099,487,1229,994,2357,720,1109,544,2408,120,1078,628,1646,916,1572,347,1433,775,1876,2099,383,717,1746,1668,259,57,1486,1225],[1321,2194,1862,289,2319,656,1126,1042,837,281,1536,2045,200,630,664,1511,1044,2334,1072,1254,2317,1763,2091,284,1227,2115,638,2487,2110,1214,1190,795,2237,2153,629,1785,2096,2200,86,510,727,55,2114,2365,125,224,2154,1792,306,398],[734,2406,1398,201,611,368,1751,2181,318,1736,930,847,1966,1924,1265,1111,850,138,1011,798,1540,332,2350,1782,931,1845,1544,492,242,966,1036,860,192,1279,1935,824,1249,747,768,1770,946,1842,1700,421,311,1804,1652,1489,1542,682],[2063,2180,1778,1506,1295,1964,2391,448,27,406,1333,1189,1615,314,733,833,1794,1628,2400,819,1040,2434,834,234,2137,453,2351,219,737,1455,1998,1857,2475,792,41,415,815,1222,964,26,1245,602,37,1491,1048,1611,1904,903,560,1283]]))
    # def test5(self):